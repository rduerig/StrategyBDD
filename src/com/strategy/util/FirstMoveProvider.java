package com.strategy.util;

/**
 * A trick class that provides indices of cells for different board sizes that
 * have to be played in order not to get swapped.<br>
 * Note that these values are determined by feeling not by any calculation.
 * 
 * @author Ralph DÃ¼rig
 */
public class FirstMoveProvider {

	private static final int[] moves1 = new int[] { 0 };
	private static final int[] moves2 = new int[] { 0, 1, 3, 5, 7, 8 };
	private static final int[] moves3 = new int[] { 6, 7, 13, 18, 17, 11 };
	private static final int[] moves4 = new int[] { 46, 47, 41, 34, 19, 11, 2,
			1, 7, 14, 29, 37 };
	private static final int[] moves5 = new int[] { 77, 79, 71, 53, 34, 14, 3,
			1, 9, 27, 46, 66 };

	public static int[] getMoves(int size) {
		switch (size) {
		case 1:
			return moves1;
		case 2:
			return moves2;
		case 3:
			return moves3;
		case 4:
			return moves4;
		case 5:
			return moves5;
		default:
			return null;
		}
	}

}

//
// -0.05394085918510516 -0.04291273110842764 -0.035032718025274745
// -0.04291273110842764 -0.05394085918510505

// -0.04291273110842764 -0.05133529627067468 -0.05246612530297157
// -0.05246612530297168 -0.05133529627067468 -0.04291273110842764

// -0.035032718025274745 -0.05246612530297168 -0.05501708671584793
// -0.05775151839619308 -0.05501708671584793 -0.05246612530297168
// -0.035032718025274634

// -0.04291273110842764 -0.05246612530297168 -0.05775151839619308
// -0.06262601964608072 -0.06262601964608083 -0.05775151839619319
// -0.05246612530297168 -0.04291273110842764

// -0.05394085918510527 -0.05133529627067479 -0.05501708671584793
// [-0.06262601964608083] -0.06031731694024678 -0.06262601964608083
// -0.05501708671584793 -0.05133529627067468 -0.05394085918510505

// -0.04291273110842764 -0.05246612530297168 -0.05775151839619319
// -0.06262601964608072 -0.06262601964608083 -0.05775151839619319
// -0.05246612530297168 -0.04291273110842764

// -0.035032718025274634 -0.05246612530297168 -0.05501708671584793
// -0.05775151839619297 -0.05501708671584793 -0.05246612530297168
// -0.035032718025274745

// -0.04291273110842764 -0.05133529627067468 -0.052466125302971456
// -0.05246612530297168 -0.05133529627067479 -0.04291273110842764

// -0.05394085918510516 -0.04291273110842764 -0.035032718025274745
// -0.04291273110842764 -0.05394085918510516

// 00 01 02 03 04

// 09 10 11 12 13 14

// 18 19 20 21 22 23 24

// 27 28 29 30 31 32 33 34

// 36 37 38 39 40 41 42 43 44

// 46 47 48 49 50 51 52 53

// 56 57 58 59 60 61 62

// 66 67 68 69 70 71

// 76 77 78 79 80
